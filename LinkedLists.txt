package Linked; 

import javax.swing.JOptionPane;

class Node {
    int data;
    Node next;

    Node(int data) {
        this.data = data;
        this.next = null;
    }
}

class LinkedList {
    Node head;
	
     //METHOD TO ADD A FIGURE AT THE BEGINNING OF THE LIST
	 
    void addFirst(int data) {
        Node newNode = new Node(data);
        newNode.next = head;
        head = newNode;
        JOptionPane.showMessageDialog(null, "Node successfully put at the beginning");
    }
    
    //method for Deleting the first node
	
    void deleteFirst() {
        if (head == null) {
            JOptionPane.showMessageDialog(null, "Empty list can not delete");
            return;
        }
        head = head.next;
        JOptionPane.showMessageDialog(null, "First node deleted");
    }

    // methode to add a node at the end
	
    void addLast(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            JOptionPane.showMessageDialog(null, "Node Successfully put at end");
            return;
        }
        Node curNode = head;
        while (curNode.next != null) {
            curNode = curNode.next;
        }
        curNode.next = newNode;
        JOptionPane.showMessageDialog(null, "Node put at the end of the list");
    }
    
    //Method to delete last node
	
     void deleteLast() {
        if (head == null) {
            JOptionPane.showMessageDialog(null, "List is empty");
            return;
        }
        if (head.next == null) {
            head = null;
            JOptionPane.showMessageDialog(null, "Last node deleted");
            return;
        }
        Node curNode = head;
        while (curNode.next.next != null) {
            curNode = curNode.next;
        }
        curNode.next = null;
        JOptionPane.showMessageDialog(null, "Last node deleted");
    }
     
    // Method to add a node at any given point
	
    void insertAtLocation(int data, int position) {
        if (position == 1) {
           addFirst(data);
            return;
        }
        Node newNode = new Node(data);
        Node curNode = head;
        int i = 1;
        while (i < position - 1 && curNode != null) {
            curNode = curNode.next;
            i++;
        }
        if (curNode == null) {
            JOptionPane.showMessageDialog(null, "Invalid position");
            return;
        }
        newNode.next = curNode.next;
        curNode.next = newNode;
        JOptionPane.showMessageDialog(null, "Node put at position " + position);
    }
    void PrintList() {
        if (head == null) {
            JOptionPane.showMessageDialog(null, "List is empty");
            return;
        }
        Node curNode = head;
        StringBuilder sb = new StringBuilder();
        while (curNode != null) {
            sb.append(curNode.data).append(" ");
            curNode = curNode.next;
        }
        JOptionPane.showMessageDialog(null, sb.toString());
    }
    
   

    void delete1(int data) {
        if (head == null) {
            JOptionPane.showMessageDialog(null, "List is empty");
            return;
        }
        if (head.data == data) {
            head = head.next;
            JOptionPane.showMessageDialog(null, "Node with value " + data + " deleted");
            return;
        }
        Node curNode = head;
        while (curNode.next != null && curNode.next.data != data) {
            curNode = curNode.next;
        }
        if (curNode.next == null) {
            JOptionPane.showMessageDialog(null, "Node with value " + data + " not found");
            return;
        }
        curNode.next = curNode.next.next;
        JOptionPane.showMessageDialog(null, "Node with value " + data + " deleted");
    }

   
}

public class Linked {
    public static void main(String[] args) {
        LinkedList n = new LinkedList();

           // List of options for user to manipulate or create Linked list 
    while (true) {
        String input = JOptionPane.showInputDialog("\nLINKED LIST MANIPULATION \nEnter Your Choice:\n1. Insert at beginning\n2. Insert at end\n3. Insert at position\n4. Delete first\n5. Delete last\n6. Delete item\n7. Print list\n0. Exit");
        int choice = Integer.parseInt(input);

        switch (choice) {
           
                
            case 1:
                int firstData = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter data"));
                n.addFirst(firstData);
            break;
            case 2:            
                int lastData = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter data"));
               n.addLast(lastData);
               break;
            case 3:
                int dataAtPos = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter data"));
                int pos = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter position"));
                n.insertAtLocation(dataAtPos, pos);
                break;
            case 4:
                n.deleteFirst();
                break;
           case 5:
                n.deleteLast();
                break;
            case 6:
                int Deletedata = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter data"));
                n.delete1(Deletedata);
               break;
            case 7: 
                n.PrintList();
             break;
            case 0: 
                  
                  JOptionPane.showMessageDialog(null,"Click 'Ok' to exit. \nThank you");
                  System.exit(0);
            default:
                JOptionPane.showMessageDialog(null,"choice not among options\nRE-ENTER CHOICE");
        }
    }
    }
}
